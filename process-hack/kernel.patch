diff --git a/fs/proc/base.c b/fs/proc/base.c
index ebea9501a..4431f6961 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -148,6 +148,16 @@ struct pid_entry {
 		NULL, &proc_pid_attr_operations,	\
 		{ .lsm = LSM })
 
+/*
+ * Trace context switch
+*/
+static int proc_trace_ctx(struct seq_file *m, struct pid_namespace *ns,
+			      struct pid *pid, struct task_struct *task)
+{
+	seq_printf(m, "%u\n", atomic_read(&task->ctx));
+	return 0;
+}
+
 /*
  * Count the number of hardlinks for the pid_entry table, excluding the .
  * and .. links.
@@ -3097,6 +3107,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 #ifdef CONFIG_PROC_PID_ARCH_STATUS
 	ONE("arch_status", S_IRUGO, proc_pid_arch_status),
 #endif
+	ONE("ctx",  S_IRUGO, proc_trace_ctx),
 };
 
 static int proc_tgid_base_readdir(struct file *file, struct dir_context *ctx)
@@ -3487,6 +3498,7 @@ static const struct pid_entry tid_base_stuff[] = {
 #ifdef CONFIG_PROC_PID_ARCH_STATUS
 	ONE("arch_status", S_IRUGO, proc_pid_arch_status),
 #endif
+	ONE("ctx",  S_IRUGO, proc_trace_ctx),
 };
 
 static int proc_tid_base_readdir(struct file *file, struct dir_context *ctx)
diff --git a/include/linux/sched.h b/include/linux/sched.h
index cae52b0e9..151f8de59 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1281,6 +1281,9 @@ struct task_struct {
 	unsigned long			prev_lowest_stack;
 #endif
 
+	/* Context switch counter */
+	atomic_t ctx;
+
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff --git a/kernel/fork.c b/kernel/fork.c
index 183a6722d..7bb791f9b 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -2037,6 +2037,8 @@ static __latent_entropy struct task_struct *copy_process(
 	p->sequential_io	= 0;
 	p->sequential_io_avg	= 0;
 #endif
+	/* Initialize ctx */
+	atomic_set(&p->ctx, 0);
 
 	/* Perform scheduler related setup. Assign this task to a CPU. */
 	retval = sched_fork(clone_flags, p);
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 81b0c7ad9..41338cc74 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -4141,6 +4141,7 @@ static inline void sched_submit_work(struct task_struct *tsk)
 
 static void sched_update_worker(struct task_struct *tsk)
 {
+	atomic_inc(&tsk->ctx);
 	if (tsk->flags & (PF_WQ_WORKER | PF_IO_WORKER)) {
 		if (tsk->flags & PF_WQ_WORKER)
 			wq_worker_running(tsk);
